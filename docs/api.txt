API Documentation for chatroom
chatroom is an opensourced chatroom project being developed by haeohreum kim and jiefu lu.

Routes:

AUTHORISATION ROUTES
-------------------------------------------------------------
/v1/auth/clear
desc: clears everything
-------------------------------------------------------------
/v1/auth/user/create POST
desc: creates a user into the chatroom
example parameters:
{
    "username": "haezera",
    "email": "haeohreum04@gmail.com",
    "password": "Password123"
}

responses:
200 When:
- OK
Example response:
{ "session": "12345678" }

400 When:
- Email is already being used
- Email is invalid
- Username is already being used
- Password is less than 8 characters

-------------------------------------------------------------
/v1/auth/user/login PUT
desc: logs in a user into the chatroom website
example parameters:
{
    "email": "haeohreum04@gmail.com",
    "password": "Password123"
}

response:
200 When:
- OK
Example response:
{ "session": "12345678" }

400 When:
- Email is an invalid email
- Password is incorrect
- Email doesn't exist within the database

-------------------------------------------------------------
/v1/auth/user/logout DELETE
desc: logs out a user from the chatroom website
headers:
"session": "123456789"

response:
200 When:
- OK
Example response:
{}

400 When:
- There is no such session within the database.
Example response:
{
    "error": "error message"
}

401 When:
- The session is not a valid structure
Example response:
{
    "error: "error message"
}

-------------------------------------------------------------
/v1/auth/admin/sessions GET
desc: returns a jsonified array of current sessions 
example parameters:
{
    "password": "admin"
}

response:
200 When:
- OK
Example response:
{
    "sessions": [
        {
            "username": "haezera",
            "session": "123456789",
        }
    ]
}

400 When:
- The admin password is incorrect.
-------------------------------------------------------------

ROOM ROUTES
-------------------------------------------------------------
/v1/room/create POST
desc: create a new chatroom
headers:
"session": "123456789"
example parameters:
{}

response:
200 When:
- OK
Example response:
{ room: "12312312" };

400 When:
- There is already a room with the same name.
- The session does not exist within the database.
- The user already has a room that they own. (AKA, already in a room).

401 When:
- The session does not satisfy the UUID v4 format.

-------------------------------------------------------------
/v1/room/delete DELETE 
desc: delete a room (can only be done by the owner)
headers:
"session": "123456789"
example parameters:
{
    "room": "123456789"
}

response:
200 When:
- OK
Example response:
{}

400 When:
- The room does not exist within the database
- The session inputted is not the owner of the room
- The session does not exist within the database.

401 When:
- The session does not satisfy the UUID v4 format.

-------------------------------------------------------------
/v1/room/join PUT
desc: allow a user to join a room 
headers: 
"session": "123456789"
example parameters:
{
    "room": "1203976"
}

response:
200 When:
- OK
Example response:
{}

400 When:
- The room does not exist within the database 
- The session inputted does not exist within the database

401 when:
- The session inputted does not conform to UUID v4 standards.

-------------------------------------------------------------
/v1/room/leave DELETE
desc: allow a user to leave a room
headers:
"session": "123456789"

response:
200 When:
- OK
Example response:
{}

400 When:
- Token does not exist within the database
- Room does not exist within the database

401 When:
- The session inputted does not conform to UUID v4 standards



